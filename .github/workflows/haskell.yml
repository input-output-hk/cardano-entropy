name: Binaries

defaults:
  run:
    shell: bash

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        ghc: ["8.10.4"]
        os: [ubuntu-latest]

    steps:
      - uses: actions/checkout@v2

      - uses: haskell/actions/setup@v1
        id: setup-haskell
        with:
          ghc-version: ${{ matrix.ghc }}
          cabal-version: 3.4.0.0

      - name: Cache configuration
        run: |
          echo "GIT_SHA=$(git rev-parse --short HEAD)"  >> $GITHUB_ENV
          echo "CACHE_VERSION=3oqhaby"                  >> $GITHUB_ENV

      - name: Configure project
        run: cabal configure --enable-tests --enable-benchmarks --write-ghc-environment-files=ghc8.4.4+

      - name: Record dependencies
        run: |
          cat ${{ env.PLAN_JSON }} | jq -r '."install-plan"[].id' | sort | uniq > dependencies.txt

      - uses: actions/cache@v2
        name: Cache cabal store
        with:
          path: ${{ steps.setup-haskell.outputs.cabal-store }}
          key: cache-${{ env.CACHE_VERSION }}-${{ runner.os }}-${{ matrix.ghc }}-${{ hashFiles('dependencies.txt') }}-${{ env.GIT_SHA }}
          restore-keys: |
            cache-${{ env.CACHE_VERSION }}-${{ runner.os }}-${{ matrix.ghc }}-${{ hashFiles('dependencies.txt') }}-${{ env.GIT_SHA }}
            cache-${{ env.CACHE_VERSION }}-${{ runner.os }}-${{ matrix.ghc }}-${{ hashFiles('dependencies.txt') }}
            cache-${{ env.CACHE_VERSION }}-${{ runner.os }}-${{ matrix.ghc }}-

      - name: Build
        run: cabal build all --enable-tests --enable-benchmarks --write-ghc-environment-files=ghc8.4.4+

      - name: Test
        run: cabal test all --enable-tests --enable-benchmarks --write-ghc-environment-files=ghc8.4.4+

  check:
    needs: build
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.tag.outputs.tag }}

    steps:
      - uses: actions/checkout@v2

      - name: Check if cabal project is sane
        run: |
          PROJECT_DIR=$PWD
          mkdir -p $PROJECT_DIR/build/sdist
          for i in $(git ls-files | grep '\.cabal'); do
            cd $PROJECT_DIR && cd `dirname $i`
            cabal check
          done

      - name: Tag new version
        id: tag
        if: ${{ github.ref == 'refs/heads/main' }}
        env:
          server: http://hackage.haskell.org
        run: |
          package_version="$(cat *.cabal | grep '^version:' | cut -d : -f 2 | xargs)"

          echo "Package version is v$package_version"

          git fetch --unshallow origin

          if git tag "v$package_version"; then
            echo "Tagging with new version "v$package_version""

            if git push origin "v$package_version"; then
              echo "Tagged with new version "v$package_version""

              echo "::set-output name=tag::v$package_version"
            fi
          fi

  release:
    needs: [build, check]
    runs-on: ubuntu-latest
    if: ${{ needs.check.outputs.tag != '' }}
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}

    steps:
      - uses: actions/checkout@v2

      - name: Create source distribution
        run: |
          PROJECT_DIR=$PWD
          mkdir -p $PROJECT_DIR/build/sdist
          for i in $(git ls-files | grep '\.cabal'); do
            cd $PROJECT_DIR && cd `dirname $i`
            cabal v2-sdist -o $PROJECT_DIR/build/sdist
          done;
